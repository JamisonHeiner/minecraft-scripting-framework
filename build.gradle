plugins {
    // Apply the java-library plugin for API and implementation separation.
    id "java-library"

    // Apply the idea plugin for easier project management when using IntelliJ IDEA
    id "idea"

    // Apply the lombok plugin to generate boilerplate code
    id "io.freefair.lombok" version "6.3.0"

    // Apply the sonarqube plugin for static code analysis
    id "org.sonarqube" version "3.3"

    // Apply the jacoco plugin for test coverage analysis
    id "jacoco"

    // Apply the maven-publish plugin for easy publishing of artifacts
    id "maven-publish"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // These dependencies are used internally and are not exposed to consumers on their own compile classpath.
    // Use JUnit Jupiter for testing.
    testImplementation "org.junit.jupiter:junit-jupiter:5.8.2"

    // Add Mockito for mocking/stubbing in tests.
    testImplementation "org.mockito:mockito-core:4.2.0"
    testImplementation "org.mockito:mockito-junit-jupiter:4.2.0"

    // Add Hamcrest for argument matching in tests.
    testImplementation "org.hamcrest:hamcrest:2.2"

    // Add Log4j 2 for logging.
    implementation "org.apache.logging.log4j:log4j-api:2.17.1"
    implementation "org.apache.logging.log4j:log4j-core:2.17.1"
}

sonarqube {
    properties {
        property "sonar.projectKey", "JamisonHeiner_minecraft-scripting-framework"
        property "sonar.organization", "jamisonheiner"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

tasks.named("sonarqube").configure {
    dependsOn test
}

jacocoTestReport {
    reports {
        // XML reports are required for integration with SonarQube
        xml.required = true
    }
}
test.finalizedBy jacocoTestReport

jar {
    archiveFileName = "${project.name}-${project.version}.jar"
}

publishing {
    repositories {
        maven {
            name = "OSSRH"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/octocat/hello-world"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

tasks.named("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}